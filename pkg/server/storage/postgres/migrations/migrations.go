// Code generated by go-bindata.
// sources:
// sql/001_add-initial-directory-tables.down.sql
// sql/001_add-initial-directory-tables.up.sql
// sql/002_add-search-idxs.down.sql
// sql/002_add-search-idxs.up.sql
// sql/003_add-initial-key-tbl.down.sql
// sql/003_add-initial-key-tbl.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialDirectoryTablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcd\x2b\xc9\x2c\xa9\xd4\xcb\x4f\x4b\xcb\x4c\x4e\x55\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\x54\x51\x90\x58\x92\x99\x9a\x57\x82\xa6\x24\xd8\xd9\xc3\xd5\xd7\x11\xaa\xc6\x9a\x0b\x10\x00\x00\xff\xff\x72\x76\xd6\x8f\x59\x00\x00\x00")

func _001_addInitialDirectoryTablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialDirectoryTablesDownSql,
		"001_add-initial-directory-tables.down.sql",
	)
}

func _001_addInitialDirectoryTablesDownSql() (*asset, error) {
	bytes, err := _001_addInitialDirectoryTablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-directory-tables.down.sql", size: 89, mode: os.FileMode(420), modTime: time.Unix(1519789532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialDirectoryTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd0\x41\x4e\xc3\x30\x10\x05\xd0\x7d\x4e\x31\xbb\x24\x52\xc4\x05\x58\x0d\xa9\xa1\x11\xa9\x0b\x8e\x03\x2a\x2c\x22\x53\xdb\x30\x52\xeb\x54\xce\x20\x28\xa7\x47\x16\x45\x54\x02\xf6\xdd\x3e\x8d\xbe\xfd\x7f\xad\x04\x6a\x01\x5d\x3d\x17\x0b\x04\x17\x98\x78\x7f\x9e\x65\x07\xd6\x78\xd1\x8a\x83\x9e\xed\x0c\x93\x0b\x0c\x45\x06\x10\xc7\xb7\x81\x2c\x74\x42\x35\xd8\xc2\x8d\x6a\x16\xa8\x56\x70\x2d\x56\x55\x06\xc0\xd1\x84\xc9\xac\x99\xc6\x30\xec\x5c\xa4\xd1\x82\xee\xf4\x83\x42\x79\x25\x40\x2e\x35\xc8\xbe\x6d\x61\x26\x2e\xb1\x6f\x35\xf0\xc4\x1f\xd1\x84\x67\x57\xc8\xe5\x7d\x51\x56\x90\x53\xf0\x14\x88\xf7\x79\x05\xf9\x63\x99\x97\x29\xf3\xeb\x0f\xe9\xcd\x3b\x54\xf5\x1c\x15\xf4\xb2\xb9\xed\x7f\xf2\xd2\xd1\xc6\x4c\x3c\x04\xb3\x75\xdf\x47\x09\x3d\xc5\x3f\x74\x4b\xd6\x6e\xdc\x2f\x9e\x5e\xbd\xa7\xf7\x63\x79\xa2\xc8\x2f\xd6\xb0\x83\x19\x6a\x91\x95\xff\x8c\x33\x7a\x4f\x6b\x77\xc2\xdb\x1c\x37\x4d\x2d\x3e\x03\x00\x00\xff\xff\x54\x85\x8a\xf6\xf9\x01\x00\x00")

func _001_addInitialDirectoryTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialDirectoryTablesUpSql,
		"001_add-initial-directory-tables.up.sql",
	)
}

func _001_addInitialDirectoryTablesUpSql() (*asset, error) {
	bytes, err := _001_addInitialDirectoryTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-directory-tables.up.sql", size: 505, mode: os.FileMode(420), modTime: time.Unix(1519789532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_addSearchIdxsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x48\xcd\x2b\xc9\x2c\xa9\xd4\xcb\x4f\x4b\xcb\x4c\x4e\x8d\xcf\x4b\xcc\x4d\xb5\xe6\xc2\x94\x2e\x48\x2c\xc9\x4c\xcd\x2b\x41\x96\x77\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x53\x28\x48\x8f\x2f\x29\x4a\xcf\xb5\xe6\x02\x04\x00\x00\xff\xff\x97\x95\xfa\xa2\x57\x00\x00\x00")

func _002_addSearchIdxsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_addSearchIdxsDownSql,
		"002_add-search-idxs.down.sql",
	)
}

func _002_addSearchIdxsDownSql() (*asset, error) {
	bytes, err := _002_addSearchIdxsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add-search-idxs.down.sql", size: 87, mode: os.FileMode(420), modTime: time.Unix(1519789532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_addSearchIdxsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x4d\x0a\x83\x30\x10\x85\xf7\x39\xc5\xec\x92\x40\xe9\x05\xba\x12\x3b\x48\xa0\x8c\xe2\x0f\xb8\x13\x29\x31\x04\x6a\x0c\x9a\x4d\xc1\xc3\x17\x1b\x17\x6d\x56\x03\x6f\xde\x7c\xf3\xe5\x35\x66\x2d\x02\xf6\x2d\x52\xa3\x4a\x02\x6f\x86\xb0\x9a\xf9\xc6\xd8\xb9\x52\x74\xc7\x1e\xfc\x18\xac\x76\x61\x70\xe3\xac\x59\x49\xa0\x5d\xb0\xe1\x7d\x3d\x63\xd6\x35\x8a\x0a\x28\x14\x81\x10\x79\x99\x3d\xb0\xc9\x51\x74\x55\x85\xb5\x78\x8d\x5b\x3c\x93\x17\xe0\x5c\xc2\xbe\x03\x07\x7e\x8c\xa4\x38\xd9\xf5\xaf\x29\xc1\x58\xf7\x95\x19\x16\xbf\xc9\xd4\x68\x99\x26\xfb\xd4\xa9\x50\x4c\x7f\x7d\x92\x2f\x91\x7f\x88\x24\xf4\x4f\x00\x00\x00\xff\xff\xb5\x55\xf1\xa6\x0a\x01\x00\x00")

func _002_addSearchIdxsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_addSearchIdxsUpSql,
		"002_add-search-idxs.up.sql",
	)
}

func _002_addSearchIdxsUpSql() (*asset, error) {
	bytes, err := _002_addSearchIdxsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add-search-idxs.up.sql", size: 266, mode: os.FileMode(420), modTime: time.Unix(1519789532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_addInitialKeyTblDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4e\xad\xd4\x2b\x28\x4d\xca\xc9\x4c\x8e\xcf\x4e\xad\x8c\x4f\x49\x2d\x49\xcc\xcc\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x02\xab\x0c\x76\xf6\x70\xf5\x75\x04\x29\xb5\xe6\x02\x04\x00\x00\xff\xff\xad\x66\x95\xd3\x3b\x00\x00\x00")

func _003_addInitialKeyTblDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_addInitialKeyTblDownSql,
		"003_add-initial-key-tbl.down.sql",
	)
}

func _003_addInitialKeyTblDownSql() (*asset, error) {
	bytes, err := _003_addInitialKeyTblDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_add-initial-key-tbl.down.sql", size: 59, mode: os.FileMode(420), modTime: time.Unix(1523731764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_addInitialKeyTblUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x51\x4f\xb3\x30\x18\x85\xef\xf9\x15\xe7\x0e\x9a\x90\xef\x0f\x70\xd5\x8f\x55\x47\x64\x45\x4b\x51\xa7\x17\x0d\x1b\xd5\x34\x5b\x0a\x61\x35\xa6\xfe\x7a\x83\xd3\x62\x66\xb8\x3d\xe7\xcd\x93\xe7\xbc\xb9\x60\x54\x32\xd4\xf9\x9a\x6d\x28\x0e\xda\x67\x51\xf4\x9d\x49\xfa\xbf\x64\x53\xf4\x6f\x78\xdb\x1d\xcd\x5e\x1d\xb4\x57\x9d\x76\xad\x39\x22\x89\x00\x60\xec\xdf\x95\xe9\x50\x33\x51\xd0\x12\xb7\xa2\xd8\x50\xb1\xc5\x0d\xdb\xa6\x5f\xb5\x1b\x5b\x7b\x6a\xf7\xce\xf4\x56\x0d\x7a\x34\x7d\x07\x59\xcb\x27\x41\xf9\x35\x03\xaf\x24\x78\x53\x96\x58\xb1\x2b\xda\x94\x12\xee\xe4\x3e\xc6\xd6\xbe\xea\x84\x57\x0f\x09\x49\x11\x1b\xfb\x62\xac\x71\x3e\x4e\x11\x3f\x93\x98\x9c\xa9\xb3\x0c\x76\xde\xe9\x36\x90\xce\xf5\x24\xe9\xfc\xa0\x71\x4f\x45\xbe\xa6\xe2\xa2\xd6\xd6\x19\xe7\x27\xeb\xcb\x3e\x22\xf3\xf4\x86\x17\x77\x0d\x43\xc1\x57\xec\x11\x7f\xd6\xab\x5f\x0a\x15\x5f\xfa\xd0\x1c\x91\xec\x87\xbb\x04\x0c\x56\x2a\xe8\x2f\x83\xc3\x71\x1a\xc6\x92\x2c\xfa\x0c\x00\x00\xff\xff\x64\x00\x14\x3b\xc9\x01\x00\x00")

func _003_addInitialKeyTblUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_addInitialKeyTblUpSql,
		"003_add-initial-key-tbl.up.sql",
	)
}

func _003_addInitialKeyTblUpSql() (*asset, error) {
	bytes, err := _003_addInitialKeyTblUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_add-initial-key-tbl.up.sql", size: 457, mode: os.FileMode(420), modTime: time.Unix(1523731764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-directory-tables.down.sql": _001_addInitialDirectoryTablesDownSql,
	"001_add-initial-directory-tables.up.sql":   _001_addInitialDirectoryTablesUpSql,
	"002_add-search-idxs.down.sql":              _002_addSearchIdxsDownSql,
	"002_add-search-idxs.up.sql":                _002_addSearchIdxsUpSql,
	"003_add-initial-key-tbl.down.sql":          _003_addInitialKeyTblDownSql,
	"003_add-initial-key-tbl.up.sql":            _003_addInitialKeyTblUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-directory-tables.down.sql": &bintree{_001_addInitialDirectoryTablesDownSql, map[string]*bintree{}},
	"001_add-initial-directory-tables.up.sql":   &bintree{_001_addInitialDirectoryTablesUpSql, map[string]*bintree{}},
	"002_add-search-idxs.down.sql":              &bintree{_002_addSearchIdxsDownSql, map[string]*bintree{}},
	"002_add-search-idxs.up.sql":                &bintree{_002_addSearchIdxsUpSql, map[string]*bintree{}},
	"003_add-initial-key-tbl.down.sql":          &bintree{_003_addInitialKeyTblDownSql, map[string]*bintree{}},
	"003_add-initial-key-tbl.up.sql":            &bintree{_003_addInitialKeyTblUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
